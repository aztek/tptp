%------------------------------------------------------------------------------
% File     : KLE001+0 : TPTP v7.2.0. Released v3.6.0.
% Domain   : Kleene Algebra
% Axioms   : Idempotent semirings
% Version  : [Hoe08] axioms.
% English  :

% Refs     : [Hoe08] Hoefner (2008), Email to G. Sutcliffe
% Source   : [Hoe08]
% Names    :

% Status   : Satisfiable
% Syntax   : Number of formulae    :   12 (  11 unit)
%            Number of atoms       :   13 (  12 equality)
%            Maximal formula depth :    4 (   3 average)
%            Number of connectives :    1 (   0 ~  ;   0  |;   0  &)
%                                         (   1 <=>;   0 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    2 (   0 propositional; 2-2 arity)
%            Number of functors    :    4 (   2 constant; 0-2 arity)
%            Number of variables   :   22 (   0 singleton;  22 !;   0 ?)
%            Maximal term depth    :    3 (   2 average)
% SPC      : 

% Comments :
%------------------------------------------------------------------------------
%----Additive idempotent monoid
fof(additive_commutativity,axiom,(
    ! [A,B] : addition(A,B) = addition(B,A) )).

fof(additive_associativity,axiom,(
    ! [C,B,A] : addition(A,addition(B,C)) = addition(addition(A,B),C) )).

fof(additive_identity,axiom,(
    ! [A] : addition(A,zero) = A )).

fof(additive_idempotence,axiom,(
    ! [A] : addition(A,A) = A )).

%----Multiplicative and commutative monoid
fof(multiplicative_associativity,axiom,(
    ! [A,B,C] : multiplication(A,multiplication(B,C)) = multiplication(multiplication(A,B),C) )).

fof(multiplicative_right_identity,axiom,(
    ! [A] : multiplication(A,one) = A )).

fof(multiplicative_left_identity,axiom,(
    ! [A] : multiplication(one,A) = A )).

%----Distributivity laws
fof(right_distributivity,axiom,(
    ! [A,B,C] : multiplication(A,addition(B,C)) = addition(multiplication(A,B),multiplication(A,C)) )).

fof(left_distributivity,axiom,(
    ! [A,B,C] : multiplication(addition(A,B),C) = addition(multiplication(A,C),multiplication(B,C)) )).

%----Annihilation
fof(right_annihilation,axiom,(
    ! [A] : multiplication(A,zero) = zero )).

fof(left_annihilation,axiom,(
    ! [A] : multiplication(zero,A) = zero )).

%----Order
fof(order,axiom,(
    ! [A,B] :
      ( leq(A,B)
    <=> addition(A,B) = B ) )).

%------------------------------------------------------------------------------
